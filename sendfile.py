#!/usr/bin/env python3

from PyQt5.QtCore import pyqtSignal, QMimeData, Qt
from PyQt5.QtGui import QPalette, QPixmap
from PyQt5.QtWidgets import (QAbstractItemView, QApplication, QDialogButtonBox,
        QFrame, QLabel, QPushButton, QTableWidget, QTableWidgetItem,
        QVBoxLayout, QWidget, QMainWindow, QScrollArea, QTextEdit, QTextBrowser)

import pyminizip
import sys
import connection


class DropArea(QLabel):
    status = pyqtSignal(str)
    changed = pyqtSignal(QMimeData)
    zipfullpath = ""
    
    def __init__(self, parent = None):
        super(DropArea, self).__init__(parent)

        self.setMinimumSize(200, 200)
        self.setFrameStyle(QFrame.Sunken | QFrame.StyledPanel)
        self.setAlignment(Qt.AlignCenter)
        self.setAcceptDrops(True)
        self.setAutoFillBackground(True)
        self.clear()

    def dragEnterEvent(self, event):
        print("drag event = {}".format(event))
        self.setText("<drop content>")
        self.setBackgroundRole(QPalette.Highlight)
        event.acceptProposedAction()
        self.changed.emit(event.mimeData())

    def dragMoveEvent(self, event):
        event.acceptProposedAction()

    def dropEvent(self, event):
        self.status.emit("drop event detected")
        mimeData = event.mimeData()
        print("Dropped file")
            # mimeData.text() == file:///Users/beta/Downloads/1488560062.txt
        print("mimeData - {}". format(mimeData.text()))

        if mimeData.hasImage():
            self.setPixmap(QPixmap(mimeData.imageData()))
        elif mimeData.hasHtml():
            self.setText(mimeData.html())
            self.setTextFormat(Qt.RichText)
        elif mimeData.hasText():
            self.setText(mimeData.text())
            self.setTextFormat(Qt.PlainText)
        elif mimeData.hasUrls():
            self.setText("\n".join([url.path() for url in mimeData.urls()]))
        else:
            self.setText("Cannot display data")

        self.setBackgroundRole(QPalette.Dark)
        
        event.acceptProposedAction()

    def dragLeaveEvent(self, event):
        self.status.emit("detected drag event")
        self.clear()
        event.accept()

    def clear(self):
        self.setText("<drop content>")
        self.setBackgroundRole(QPalette.Dark)
        self.changed.emit(None)
        self.status.emit("Cleared")

    def zip_file(self, x):
        self.status.emit("zipping file")
        fileurl = x
        fullpath = fileurl.split("file://")[-1]
        filename = fullpath.split("/")[-1]
        basename = filename.split(".")[0]
        zipname = basename + '.zip'
        self.zipfullpath = fullpath.replace(filename, zipname)
        password = 'infected'
        pyminizip.compress(fullpath, self.zipfullpath, password, 7)
        #self.setText("file://" + self.zipfullpath)
    
    def sendFile(self):
        conn = connection.SftpConnection()
        conn.connect()
        conn.sendFile(self.zipfullpath)
        self.status.emit("Sending {}".format(self.zipfullpath))
        
    def sentFile(self, bytesSent, fileSize):
        self.status.emit("file sent")
        pyqtSignal(name="sentFile")
        while(bytesSent < fileSize):
            print("Sending {} of {}".format(bytesSent, fileSize))
    
    def sendPressed(self):
        try:
            self.status.emit("send button pressed")
            self.zip_file(self.text())
        except:
            self.status.emit("couldn't zip")
        else: # else happens if there is no exception so if zip is successful then do this
            self.status.emit("connecting to remote server")
            self.sendFile()
            
class DropSiteWindow(QWidget):

    def __init__(self, logger=None):
        super(DropSiteWindow, self).__init__()
        self.logger = logger
        self.abstractLabel = QLabel(
                "This example accepts drags from other applications and "
                "displays the MIME types provided by the drag object.")
        self.abstractLabel.setWordWrap(True)
        self.abstractLabel.adjustSize()

        self.dropArea = DropArea()
        self.dropArea.changed.connect(self.updateFormatsTable)
        
        self.dropArea.status.connect(self.updateLogger)
        
        self.formatsTable = QTableWidget()
        self.formatsTable.setColumnCount(2)
        self.formatsTable.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.formatsTable.setHorizontalHeaderLabels(["Format", "Content"])
        self.formatsTable.horizontalHeader().setStretchLastSection(True)
        
        #self.statusWindow = StatusLog()
        #self.statusWindow.setToolTip("Waiting for file")
        #self.dropArea.status.connect(self.statusWindow.statusUpdate)
        
        self.clearButton = QPushButton("Clear")
        self.quitButton = QPushButton("Quit")
        self.sendButton = QPushButton("Send")
        
        self.buttonBox = QDialogButtonBox()
        self.buttonBox.addButton(self.clearButton, QDialogButtonBox.ActionRole)
        self.buttonBox.addButton(self.quitButton, QDialogButtonBox.RejectRole)
        self.buttonBox.addButton(self.sendButton, QDialogButtonBox.ActionRole)
        
        
        
        self.quitButton.pressed.connect(self.close)
        self.clearButton.pressed.connect(self.dropArea.clear)
        #self.clearButton.pressed.connect(self.updateLogger)    
        self.sendButton.pressed.connect(self.dropArea.sendPressed)        


        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.abstractLabel)
        mainLayout.addWidget(self.dropArea)
        mainLayout.addWidget(self.formatsTable)
        mainLayout.addWidget(self.buttonBox)
        #mainLayout.addWidget(self.statusWindow)
        
        self.setLayout(mainLayout)

        self.setWindowTitle("Drop Site")
        self.setMinimumSize(350, 500)
    def updateLogger(self, text=None):
        try:
            self.logger.append(text)
        except AttributeError:
            print("Console Out>>> logger is not connected")
            print("Console Out>>> " + text)
    
    #def connect(self):
        #self.clearButton.pressed.connect(self.updateLogger)        
        #self.sendButton.pressed.connect(self.dropArea.sendPressed)
        
    def updateFormatsTable(self, mimeData=None):
        self.formatsTable.setRowCount(0)

        if mimeData is None:
            return

        for format in mimeData.formats():
            formatItem = QTableWidgetItem(format)
            formatItem.setFlags(Qt.ItemIsEnabled)
            formatItem.setTextAlignment(Qt.AlignTop | Qt.AlignLeft)

            if format == 'text/plain':
                text = mimeData.text().strip()
            elif format == 'text/html':
                text = mimeData.html().strip()
            elif format == 'text/uri-list':
                text = " ".join([url.toString() for url in mimeData.urls()])
            else:
                text = " ".join(["%02X" % ord(datum) for datum in mimeData.data(format)])

            row = self.formatsTable.rowCount()
            self.formatsTable.insertRow(row)
            self.formatsTable.setItem(row, 0, QTableWidgetItem(format))
            self.formatsTable.setItem(row, 1, QTableWidgetItem(text))

        self.formatsTable.resizeColumnToContents(0)


if __name__ == '__main__':

    app = QApplication(sys.argv)
    window = DropSiteWindow()
    window.show()
    sys.exit(app.exec_())


